::: {.content-hidden}
Copyright (C) 2024 Martin KÃ¶hler and co-authors (martin.koehler@jku.at)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:::

# Netlist reduction: Feasibility study

## TICER algorithm: TIme-Constant Equilibration Reduction

This section reviews the original TICER paper [@ticer-sheehan-1999], and illustrates the main ideas.

Given $N$-terminal star network:

- node $N$ is the center
- terminals labeled from $0$ to $N\!-\!1$   (in @fig-n-terminal-star-network, $m$ is used instead of $N\!-\!1$)
- each branch, going from the terminal $T_i$ to $N$, contains a resistor and a capacitor in parallel
- resistor values are given as conductance (easier parallel summation): $g_{ij}\,\,[\mho]$  
- capacitances values: $c_{ij}\,\,[F]$

![N-terminal star network](figures/ticer_n-terminal_star_network.svg){width=40% #fig-n-terminal-star-network}

Sum of resistances $\gamma_N$, and capacitances $\chi_N$:

$$
\gamma_N = \sum_{k=0}^{N-1} g_{kN}, \quad \chi_N = \sum_{k=0}^{N-1} c_{kN}
\tag{1.2}
$$

The time constant $\tau_N$ of a given node $N$ then is:
$$
\tau_N = \frac{\chi_N}{\gamma_N} = \frac{\sum_{k=0}^{N-1} c_{kN}}{\sum_{k=0}^{N-1} g_{kN}}   \tag{1.3}
$$

**Basic node elimination idea:** Given a desired frequency window, using the time-constants, we can classify nodes into 3 groups: slow / normal / quick.
Then we can eliminate slow and quick nodes, as the normal nodes will suffice to preserve the behavior for the frequency window:

**RC circuit in Laplace domain:**
$$
(s \mathbf{C} + \mathbf{G})\mathbf{v} = \mathbf{Y} \mathbf{v} = \mathbf{J}  \tag{2.1}
$$

- $s \in \mathbb{C}$: Complex Frequency
- $\mathbf{C} \in \mathbb{R}^{N-1 \times N-1}$: nodal capacitances
- $\mathbf{G} \in \mathbb{R}^{N-1 \times N-1}$: nodal conductances
- $\mathbf{v} \in \mathbb{R}^{N-1}$: nodal voltages
- $\mathbf{J} \in \mathbb{R}^{N-1}$: current sources at the nodes

This can be written as a block system:
$$
\begin{bmatrix}
\mathbf{\tilde{Y}} & \mathbf{y} \\
\mathbf{y}^T & s\chi_N + \gamma_N
\end{bmatrix}
\begin{bmatrix}
\tilde{\mathbf{v}} \\
v_N
\end{bmatrix}
=
\begin{bmatrix}
\tilde{\mathbf{J}} \\
j_N
\end{bmatrix}
\tag{2.2}
$$

::: {.callout-note}
In equation (2.2), Sheehan uses the tilde accent to name the remainder of the matrix $\mathbf{Y}$ as $\mathbf{\tilde{Y}}$, when looking only at the last row and column (same principle applies to vector $\mathbf{v}$ and $\mathbf{\tilde{v}}$):
\begin{equation}
\mathbf{Y} =
\left[
\begin{array}{cccc:c}
y_{11} & y_{12} & \cdots & y_{1,N-1} & y_{1N} \\
y_{21} & y_{22} & \cdots & y_{2,N-1} & y_{2N} \\
\vdots & \vdots & \ddots & \vdots   & \vdots \\
\hdashline
y_{N1} & y_{N} & \cdots & y_{N,N-1} & y_{NN}
\end{array}
\right]
=
\left[
\begin{array}{c:c}
\mbox{\LARGE $\mathbf{\tilde{Y}}$} & 
\begin{array}{c}
y_{1N} \\
y_{2N} \\
\vdots
\end{array} \\ \hdashline
\begin{array}{cccc}
y_{N1} & y_{N2} & \cdots & y_{N,N-1}
\end{array}
&
y_{NN}
\end{array}
\right]
=
\left[
\begin{array}{c:c}
\mbox{\LARGE $\mathbf{\tilde{Y}}$} & 
\mbox{\LARGE $\mathbf{y}$} \\ \hdashline
\mbox{\LARGE $\mathbf{y}^T$} 
&
y_{NN}
\end{array}
\right]
\end{equation}
:::

### Comments on page 2, equation $(2.3)$

To arrive at equations (2.3), (2.4), and (2.5) from equation (2.2), the process involves solving for $v_N$, the voltage at the node to be eliminated (node $N$), and substituting it back into the system of equations.

Starting with equation (2.2):

$$
\begin{bmatrix}
\mathbf{\tilde{Y}} & \mathbf{y} \\
\mathbf{y}^T & s\chi_N + \gamma_N
\end{bmatrix}
\begin{bmatrix}
\tilde{\mathbf{v}} \\
v_N
\end{bmatrix}
=
\begin{bmatrix}
\tilde{\mathbf{J}} \\
j_N
\end{bmatrix}
\tag{2.2}
$$

we have two block equations:

$$
   \mathbf{\tilde{Y}} \tilde{\mathbf{v}} + \mathbf{y} v_N = \tilde{\mathbf{J}}
\tag{\small First block equation of 2.2}
$$ 

$$
   \mathbf{y}^T \tilde{\mathbf{v}} + (s\chi_N + \gamma_N) v_N = j_N
\tag{\small Second block equation of 2.2}
$$

Solve the second block equation for $v_N$:
   $$
   v_N = \frac{j_N - \mathbf{y}^T \tilde{\mathbf{v}}}{s\chi_N + \gamma_N}
   $$

Substitute the expression for $v_N$ in the first block equation:

   $$
   \mathbf{\tilde{Y}} \tilde{\mathbf{v}} + \mathbf{y} \left(\frac{j_N - \mathbf{y}^T \tilde{\mathbf{v}}}{s\chi_N + \gamma_N}\right) = \tilde{\mathbf{J}}
   $$
   Simplifying, we get:
   $$
   \left(\mathbf{\tilde{Y}} - \frac{\mathbf{y} \mathbf{y}^T}{s\chi_N + \gamma_N}\right) \tilde{\mathbf{v}} = \tilde{\mathbf{J}} - \frac{\mathbf{y} j_N}{s\chi_N + \gamma_N}
   $$

This leads to the modified system:
$$
(\tilde{Y} - \mathbf{E}) \tilde{\mathbf{v}} = \tilde{\mathbf{J}} - \mathbf{F}
\tag{2.3}
$$

Where:

$$
\mathbf{E} = \frac{\mathbf{y} \mathbf{y}^T}{s\chi_N + \gamma_N}
$$

$$
\mathbf{F} = \frac{\mathbf{y} j_N}{s\chi_N + \gamma_N}
$$

::: {.callout-note}
There's a typo in the original paper in (2.3), the printed variable $\mathbf{v_N}$ should instead be $\mathbf{\tilde{v}}$.
:::

So we arrive at:
$$
\mathbf{E}_{ij} = \frac{(g_{iN} + s c_{iN})(g_{jN} + s c_{jN})}{s\chi_N + \gamma_N}
\tag{2.4}
$$
$$
\mathbf{F}_{i} = \frac{g_{iN} + s c_{iN}}{s\chi_N + \gamma_N} j_N
\tag{2.5}
$$

### Quick Nodes

Suppose:

- we eliminate a quick node $N$
- $s\chi_N \ll \gamma_N$
- equivalently, $|s \tau_N| \ll 1$
- we approximate $\mathbf{E}_{ij}$  from (2.4)
- we eliminate higher-order terms, containing factors like $s^n$ for $n \ge 2$

$$
\begin{aligned}
\mathbf{E}_{ij} &= \frac{(g_{iN} + s c_{iN})(g_{jN} + s c_{jN})}{s\chi_N + \gamma_N} \\
                &= \frac{g_{iN}g_{jN}}{s\chi_N + \gamma_N} + \frac{s \left( g_{jN} c_{iN} + g_{iN} c_{jN} \right)}{s\chi_N + \gamma_N} + \frac{s^2 c_{iN} c_{jN}}{s\chi_N + \gamma_N}
\end{aligned}
$$

$$
\mathbf{E}_{ij} \approx \frac{g_{iN}g_{jN}}{\cancel{s\chi_N} + \gamma_N} + s\frac{g_{jN} c_{iN} +  g_{iN} c_{jN}}{\cancel{s\chi_N} + \gamma_N} + \cancel{\frac{s^2 c_{iN} c_{jN}}{s\chi_N + \gamma_N}}
$$

$$
\mathbf{E}_{ij} \approx \frac{g_{iN}g_{jN}}{\gamma_N} + s\frac{g_{jN} c_{iN} +  g_{iN} c_{jN}}{\gamma_N}   \tag{3.2}
$$

**Eliminating a quick node:**

Recipe for translating (3.2) into a modified circuit:

- remove all resistors and capacitors connecting other nodes to $N$
- insert new resistors and capacitors between former neighbors $i$, $j$ of $N$ according to these rules:
   - If nodes $i$ and $j$ had been connected to $N$ through conductances $g_{iN}$ and $g_{jN}$, insert conductance $\frac{g_{iN} g_{jN}}{\gamma_N}$ between $i$ and $j$
   - If node $i$ had a capacitor $c_{iN}$ to $N$, and node $j$ had a conductance $g_{jN}$ to $N$, insert a capacitor $\frac{c_{iN} g_{jN}}{\gamma_N}$ between $i$ and $j$

### Slow Nodes

Suppose:

- we eliminate a slow node $N$
- $s\chi_N \gg \gamma_N$
- equivalently, $|s \tau_N| \gg 1$
- we approximate $\mathbf{E}_{ij}$ from (2.4)
- we retain terms containing $s$
- to preserve DC characteristics, we use $\frac{g_{iN}g_{jN}}{\gamma_N}$ in place of whatever constant terms come from the equation
- higher-order terms in $\gamma_N$ and $s$ are neglected to simplify the expression.

Starting with (2.4):

$$
\mathbf{E}_{ij} = \frac{(g_{iN} + s c_{iN})(g_{jN} + s c_{jN})}{s\chi_N + \gamma_N}
\tag{2.4}
$$

Given the approximation:

$$
\frac{1}{s \chi_N + \gamma_N} \approx \frac{1}{s \chi_N} \left( 1 - \frac{\gamma_N}{s \chi_N} \right)
\tag{4.2}
$$

Substitute (4.2) into (2.4):

$$
\begin{aligned}
\mathbf{E}_{ij} &\approx \frac{(g_{iN} + s c_{iN})(g_{jN} + s c_{jN})}{s\chi_N}\left(1 - \frac{\gamma_N}{s\chi_N}\right) \\
                &\approx \left(\frac{g_{iN}g_{jN}}{s\chi_N} + \frac{\cancel{s} \left( g_{jN} c_{iN} + g_{iN} c_{jN} \right)}{\cancel{s}\chi_N} + \frac{s\cancel{^2} c_{iN} c_{jN}}{\cancel{s}\chi_N}\right)\left(1 - \frac{\gamma_N}{s\chi_N}\right) \\
\end{aligned}
$$

Expand:

$$
\begin{aligned}
\mathbf{E}_{ij} &= \frac{g_{iN}g_{jN}}{s\chi_N} - \frac{g_{iN}g_{jN} \gamma_N}{s^2 \chi_N^2} \\
                &+ \frac{g_{jN} c_{iN} + g_{iN} c_{jN}}{\chi_N} - \frac{\left( g_{jN} c_{iN} + g_{iN} c_{jN} \right) \gamma_N}{s\chi_N^2} \\
                &+ \frac{s c_{iN} c_{jN}}{\chi_N} - \frac{\cancel{s} c_{iN} c_{jN} \gamma_N}{\cancel{s}\chi_N^2}
\end{aligned}
$$

After we remove constant terms:

$$
\begin{aligned}
\mathbf{E}_{ij} &\approx \frac{g_{iN}g_{jN}}{s\chi_N} - \frac{g_{iN}g_{jN} \gamma_N}{s^2 \chi_N^2} - \frac{\left( g_{jN} c_{iN} + g_{iN} c_{jN} \right) \gamma_N}{s\chi_N^2} + s \frac{c_{iN} c_{jN}}{\chi_N}
\end{aligned}
$$



Remove higher-order terms in $\gamma_N$ and $s$:

$$
\begin{aligned}
\mathbf{E}_{ij} &\approx \frac{g_{iN}g_{jN}}{s\chi_N} + s \frac{c_{iN} c_{jN}}{\chi_N}
\end{aligned}
$$

Sheehan arrives at (4.1):

$$
\mathbf{E}_{ij} \approx \frac{g_{iN}g_{jN}}{\gamma_N} + s\frac{c_{iN} c_{jN}}{\chi_N}
\tag{4.1}
$$

$$
\textcolor{red}{\text{TODO: why not }\frac{g_{iN} g_{jN}}{s\chi_N} \text{?}}
$$


- Rules:
   - If nodes $i$ and $j$ had been connected to $N$ through conductances $g_{iN}$ and $g_{jN}$, insert conductance $\frac{g_{iN} g_{jN}}{\gamma_N}$ from $i$ to $j$
   - If node $i$ had a capacitor $c_{iN}$ to $N$, and node $j$ had a capacitor $c_{jN}$ to $N$, insert a capacitor $\frac{c_{iN} c_{jN}}{\gamma_N}$ from $i$ to $j$

$$
\textcolor{red}{\text{TODO: why not }\frac{c_{iN} c_{jN}}{\chi_N} \text{?}}
$$


## TICER 2007 paper

This section reviews some aspects of the 2007 TICER paper [@ticer-sheehan-2007].

User-supplied algorithm parameters:

- Set of $\mathbf{fixed}$ nodes (designated to be left alone, i.e., not to be eliminated)
- $\mathbf{MaxDeg} \in \mathbb{N}\!\setminus\!\{0, 1\}$: number of passes (user-supplied parameter)
- $f^{\text{max}}$: maximum operating frequency  of interest
- $\epsilon \in \mathbb{R}_{[0,1]}$: small number enforcing the requirement that $|s \tau_N| \ll 1$

In the paper, figure 5 and 6 demonstrate the algorithm for eliminating a quick node (here is a python conversion of those).

```python
def eliminate_quick_node(N: Node):
   neighbors = nodes_incident_to(node=N)
   for i in neighbors:
      g_iN = conductance[i, N]
      if g_iN == 0: 
         continue
      for j in neighbors:
         if i <= j:
            continue
         g_jN = conductance[j, N]
         c_jN = capacitance[j, N]
         gamma_N = incident_conductance_sum(node=N)
         if g_jN > 0:
            add_conductance(i, j, g_iN * g_jN / gamma_N)
         if c_jN > 0:
            add_capacitance(i, j, g_iN * c_jN / gamma_N)
   remove_all_incident_conductances_and_capacitances(i, N)
```

```python
def ticer(freq_max: float, epsilon: float, max_deg: int):
   for deg in range(2, max_deg):
      Q = queue.Queue(nodes_not_fixed())
      while not Q.empty():
         N = Q.get()  # pop
         if number_of_incident_resistors(N) > deg:
            continue
         tau_N = time_constant(N)
         if 2 * math.pi * freq_max * tau_N <= epsilon:
            # ensure the neighbors are in the queue,
            # because the neighbors' incident resistors and time constants 
            # might have been changed, so they should be reconsidered for elimination
            missing_neighbors = [n in nodes_incident_to(node=N) if n not in Q]
            q.push(missing_neighbors)

            eliminate_quick_node(N)

   # NOTE: "leaf node" N means, number_of_incident_resistors(N) == 1
   for N in leaf_nodes():
      if N in fixed_nodes():  # N is protected
         continue

      tau_N = time_constant(N)
      if 2 * math.pi * freq_max * tau_N <= epsilon:
         eliminate_quick_node(N)
```

### Pseudocode for slow node elimination

Sheehan mentions that elimination of slow nodes is of reduced importances, and therefore does not explicitly provide pseudocode for this case, instead refers to the original TICER paper [@ticer-sheehan-1999].

So if we fill in the gaps we arrive at:

```python
def eliminate_slow_node(N: Node):
   neighbors = nodes_incident_to(node=N)
   for i in neighbors:
      g_iN = conductance[i, N]
      c_iN = capacitance[i, N]
      for j in neighbors:
         if i <= j:
            continue
         g_jN = conductance[j, N]
         c_jN = capacitance[j, N]
         gamma_N = incident_conductance_sum(node=N)
         if g_iN > 0 and g_jN > 0:
            add_conductance(i, j, g_iN * g_jN / gamma_N)
         if c_iN > 0 and c_jN > 0:
            add_capacitance(i, j, c_iN * c_jN / gamma_N)
   remove_all_incident_conductances_and_capacitances(i, N)
```

To integrate this into the algorithm, we additionally need a minimum frequency $f^{\text{min}}$ parameter supplied by the user.

```python
def ticer(freq_min: float, freq_max: float, epsilon: float, max_deg: int):
   for deg in range(2, max_deg):
      Q = queue.Queue(nodes_not_fixed())
      while not Q.empty():
         N = Q.get()  # pop
         if number_of_incident_resistors(N) > deg:
            continue
         tau_N = time_constant(N)
         if 2 * math.pi * freq_max * tau_N <= epsilon:
            # NOTE: ensure the neighbors are in the queue,
            # because the neighbors' incident resistors and time constants 
            # might have been changed, so they should be reconsidered for elimination
            missing_neighbors = [n in nodes_incident_to(node=N) if n not in Q]
            q.push(missing_neighbors)

            eliminate_quick_node(N)

         if 2 * math.pi * freq_min * tau_N <= epsilon:
            # NOTE: ensure the neighbors are in the queue,
            # because the neighbors' incident resistors and time constants 
            # might have been changed, so they should be reconsidered for elimination
            missing_neighbors = [n in nodes_incident_to(node=N) if n not in Q]
            q.push(missing_neighbors)

            eliminate_slow_node(N)

   # NOTE: "leaf node" N means, number_of_incident_resistors(N) == 1
   for N in leaf_nodes():
      if N in fixed_nodes():  # N is protected
         continue

      tau_N = time_constant(N)
      if 2 * math.pi * freq_max * tau_N <= epsilon:
         eliminate_quick_node(N)
```

### Example 1

Let's reduce the example presented by Sheehan in the from the 2007 paper  [@ticer-sheehan-2007], as shown in @fig-ticer-example-schematic.
The goal is to eliminate the quick node $v_3$.

{{< include /figures/ticer-example-schematic.qmd >}}

- Time constant $\tau_{v_3} = \frac{c_3}{g_{13} + g_{23}}$
- Quick node condition: $\text{is\_quick}(N) := 2 \pi f^{\text{max}} \tau_N \lt \epsilon$

Elimination of node $N_2$:

- Incident devices $R_{13}$, $R_{23}$, $C_{3}$ are removed
- New devices for neighbors
  - Between nodes $(v_0, v_1)$: 
    - add $c_{10} = \frac{g_{13}*c_{3}}{g_{13} + g_{23}}$
  - Between nodes $(v_0, v_2)$: 
    - add $c_{20} = \frac{g_{23}*c_{3}}{g_{13} + g_{23}}$
  - Between nodes $(v_1, v_2)$: 
    - add $g_{12} = \frac{g_{13}*g_{23}}{g_{13} + g_{23}}$

{{< include /figures/ticer-example-schematic-reduced.qmd >}}

**RC circuit in Laplace domain:**

$$
(s \mathbf{C} + \mathbf{G})\mathbf{v} = \mathbf{Y} \mathbf{v} = \mathbf{J}  \tag{2.1}
$$

**Solve for voltages:**

$$
\mathbf{v} = (s \mathbf{C} + \mathbf{G})^{-1} \mathbf{J} = Y^{-1} \mathbf{J}
$$

**Transfer function:**

$$
H(s) = \frac{\mathbf{v}(s)}{\mathbf{J}(s)} = Y^{-1}(s) = (s \mathbf{G} + \mathbf{C})^{-1}
$$

E.g. the transfer function (for input $J_1(s)$, output $V_2(s)$) is:

$$
H(s) = \frac{\text{adj}(s \mathbf{C} + \mathbf{G})_{21}}{det(s \mathbf{C} + \mathbf{G})}
$$


#### Analysis of the original circuit

So for the original circuit of @fig-ticer-example-schematic, we have 3 nodes, in addition to GND ($v_0$).

**So we have 3 nodal equations:**

$$
\begin{aligned}
c_1 \dot{v_1} + g_d v_1 + g_{13} (v_1 - v_3)              &= j_1(t) \\
c_2 \dot{v_2} + g_{23} (v_2 - v_3)                        &= 0      \\
c_3 \dot{v_3} + g_{13} (v_3 - v_1) + g_{23} * (v_3 - v_2) &= 0
\end{aligned}
$$

**Laplace domain (MNA[^abbrev-mna] form):**

$$
\begin{equation}
\left(
s 
\left[
\begin{array}{ccc}
c_1 &   0 &   0 \\
  0 & c_2 &   0 \\
  0 &   0 & c_3
\end{array}
\right] 
+
\left[
\begin{array}{cccc}
g_d + g_{13}  &        0 & -g_{13}         \\
0             &   g_{23} & -g_{23}         \\
-g_{13}       &  -g_{23} & g_{13} + g_{23}
\end{array}
\right]
\right)
\left[
\begin{array}{c}
V_{1}(s) \\
V_{2}(s) \\
V_{3}(s)
\end{array}
\right]
=
\left[
\begin{array}{c}
J_{1}(s) \\
0 \\
0
\end{array}
\right]
\end{equation}
$$

So given the values from Sheehan's numerical example:

- $g_d = g_{13} = g_{23} = 1$
- $c_1 = c_2 = 1$
- $c_3 = 0.01$

We have a system with
$$
\mathbf{C} = 
\left[
\begin{array}{ccc}
  1 &   0 &    0 \\
  0 &   1 &    0 \\
  0 &   0 & 0.01
\end{array}
\right],
\mathbf{G} =
\left[
\begin{array}{ccc}
   2 &   0 & -1 \\
   0 &   1 & -1 \\
  -1 &  -1 &  2
\end{array}
\right]
$$

**Transfer function:**

$$
H(s) = \frac{1}{0.01s^3 + 2.03s^2 + 4.02s + 1}
$$

#### Analysis of the reduced circuit

The reduced circuit in @fig-ticer-example-schematic-reduced only has 2 remaining nodes (besides GND).

**So we have 2 nodal equations:**

$$
\begin{aligned}
(c_1 + c_{10}) \dot{v_1} + g_d v_1 + g_{12} (v_1 - v_2)   &= j_1(t) \\
(c_2 + c_{20}) \dot{v_2} + g_{12} (v_2 - v_1)             &= 0
\end{aligned}
$$

**Laplace domain (MNA[^abbrev-mna] form):**

$$
\begin{equation}
\left(
s 
\left[
\begin{array}{cc}
c_1 + c_{10} &            0 \\
           0 & c_2 + c_{20}
\end{array}
\right] 
+
\left[
\begin{array}{cccc}
g_d + g_{12}  & -g_{12}         \\
-g_{12}       &  g_{12}
\end{array}
\right]
\right)
\left[
\begin{array}{c}
V_{1}(s) \\
V_{2}(s)
\end{array}
\right]
=
\left[
\begin{array}{c}
J_{1}(s) \\
0
\end{array}
\right]
\end{equation}
$$

**New devices:**

  - $c_{10} = \frac{g_{13}*c_{3}}{g_{13} + g_{23}} = \frac{1 * 0.01}{1 + 1} = 0.005$
  - $c_{20} = \frac{g_{23}*c_{3}}{g_{13} + g_{23}} = \frac{1 * 0.01}{1 + 1} = 0.005$
  - $g_{12} = \frac{g_{13}*g_{23}}{g_{13} + g_{23}} = \frac{1 * 1}{1 + 1} = 0.5$

We have a system with:

$$
\mathbf{C} = 
\left[
\begin{array}{ccc}
1.005 &   0  \\
  0 & 1.005  
\end{array}
\right],
\mathbf{G} =
\left[
\begin{array}{ccc}
    1.5 &  -0.5 \\
   -0.5 &  0.5
\end{array}
\right]
$$

**Transfer function:**

$$
H(s) = \frac{0.5}{1.010025s^2 + 2.01s + 0.5}
$$


#### Comparison of bode plots

Bode plots:

{{< embed ./notebooks/ticer_example_bode_plots.ipynb#fig-bode-plot-ft-vs-mag >}}

{{< embed ./notebooks/ticer_example_bode_plots.ipynb#fig-bode-plot-ft-vs-phase >}}

In the original circuit we have an additional pole at $s = 201$, which is expendable.

{{< embed ./notebooks/ticer_example_bode_plots.ipynb#fig-pole-zero-plot-original >}}

If we remove this pole (for better comparison), we have:

{{< embed ./notebooks/ticer_example_bode_plots.ipynb#fig-pole-zero-plot-original-without-201 >}}

So in the reduced circuit, that pole is no longer present, but the others are.

{{< embed ./notebooks/ticer_example_bode_plots.ipynb#fig-pole-zero-plot-reduced >}}



